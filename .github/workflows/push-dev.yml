name: CI & Push "dev"

on: 
  #repository_dispatch:
  push:
    branches: [master]
    paths:
      - 'containers/**'
      - 'script-library/**'

jobs:
  build-page-1:
    name: Build and push (page 1 of 3)
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Automated update') && !contains(github.event.head_commit.message, 'CI ignore')"
    steps:

    - name: Container Registry Login
      id: docker_login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Checkout
      id: checkout
      uses: actions/checkout@v1

    - name: Build and push dev tags (page 1 of 3)
      id: build_and_push
      run: |
        set -e
        yarn install
        GIT_BRANCH=$(echo "${{ github.ref }}" | grep -oP 'refs/(heads|tags)/\K(.+)')
        if [ "$GIT_BRANCH" == "" ]; then 
            GIT_BRANCH=master
        fi
        build/vscdc push  --page 1 \
                          --pageTotal 3 \
                          --release $GIT_BRANCH \
                          --github-repo ${{ github.repository }} \
                          --registry ${{ secrets.REGISTRY }} \
                          --registry-path ${{ secrets.REGISTRY_BASE_PATH }} \
                          --stub-registry ${{ secrets.STUB_REGISTRY }} \
                          --stub-registry-path ${{ secrets.STUB_REGISTRY_BASE_PATH }}

  build-page-2:
    name: Build and push (page 2 of 3)
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Automated update') && !contains(github.event.head_commit.message, 'CI ignore')"
    steps:

    - name: Container Registry Login
      id: docker_login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Checkout
      id: checkout
      uses: actions/checkout@v1

    - name: Build and push dev tags (page 2 of 3)
      id: build_and_push
      run: |
        set -e
        yarn install
        GIT_BRANCH=$(echo "${{ github.ref }}" | grep -oP 'refs/(heads|tags)/\K(.+)')
        if [ "$GIT_BRANCH" == "" ]; then 
            GIT_BRANCH=master
        fi
        build/vscdc push  --page 2 \
                          --pageTotal 3 \
                          --release $GIT_BRANCH \
                          --github-repo ${{ github.repository }} \
                          --registry ${{ secrets.REGISTRY }} \
                          --registry-path ${{ secrets.REGISTRY_BASE_PATH }} \
                          --stub-registry ${{ secrets.STUB_REGISTRY }} \
                          --stub-registry-path ${{ secrets.STUB_REGISTRY_BASE_PATH }}

  build-page-3:
    name: Build and push (page 3 of 3)
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Automated update') && !contains(github.event.head_commit.message, 'CI ignore')"
    steps:

    - name: Container Registry Login
      id: docker_login
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.REGISTRY }}
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    - name: Checkout
      id: checkout
      uses: actions/checkout@v1

    - name: Build and push dev tags (page 3 of 3)
      id: build_and_push
      run: |
        set -e
        yarn install
        GIT_BRANCH=$(echo "${{ github.ref }}" | grep -oP 'refs/(heads|tags)/\K(.+)')
        if [ "$GIT_BRANCH" == "" ]; then 
            GIT_BRANCH=master
        fi
        build/vscdc push  --page 3 \
                          --pageTotal 3 \
                          --release $GIT_BRANCH \
                          --github-repo ${{ github.repository }} \
                          --registry ${{ secrets.REGISTRY }} \
                          --registry-path ${{ secrets.REGISTRY_BASE_PATH }} \
                          --stub-registry ${{ secrets.STUB_REGISTRY }} \
                          --stub-registry-path ${{ secrets.STUB_REGISTRY_BASE_PATH }}

  package:
    name: Package
    needs: [build-page-1, build-page-2, build-page-3]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Automated update') && !contains(github.event.head_commit.message, 'CI ignore')"
    steps:

    - name: Checkout
      id: checkout
      uses: actions/checkout@v1

    - name: Package
      id: package
      run: |
        set -e
        yarn install
        GIT_BRANCH=$(echo "${{ github.ref }}" | grep -oP 'refs/(heads|tags)/\K(.+)')
        if [ "$GIT_BRANCH" == "" ]; then 
            GIT_BRANCH=master
        fi
        build/vscdc pack  --no-push-images \
                          --release $GIT_BRANCH \
                          --github-repo ${{ github.repository }} \
                          --registry ${{ secrets.REGISTRY }} \
                          --registry-path ${{ secrets.REGISTRY_BASE_PATH }} \
                          --stub-registry ${{ secrets.STUB_REGISTRY }} \
                          --stub-registry-path ${{ secrets.STUB_REGISTRY_BASE_PATH }}

        # Set an output with the resulting package name for upload
        PKG_PREFIX=$(node -p "require('./package.json').name")
        PKG_NAME=$PKG_PREFIX-${{ github.sha }}.tgz
        mv ./$PKG_PREFIX-*.tgz ./$PKG_NAME

        echo 
        echo "::set-output name=package_name::$PKG_NAME"

    - name: Upload Package
      uses: actions/upload-artifact@v1.0.0
      with:
        name: ${{ steps.package.outputs.package_name }}
        path: ./${{ steps.package.outputs.package_name }}

  cgmanifest:
    name: Trigger CG manifest generation
    needs: [build-page-1, build-page-2, build-page-3]
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'Automated update') && !contains(github.event.head_commit.message, 'CI ignore')"
    steps:
    - name: Trigger CG manifest generation 
      id: cgmanifest
      run: |
        set -e
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Content-Type: application/json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          --data '{"event_type":"manual_oss_cg_trigger"}'
